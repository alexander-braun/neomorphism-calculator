{"version":3,"sources":["components/Display.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Display","props","className","chain","join","result","require","evaluate","format","App","useState","updateChain","setResult","handleClick","e","target","currentTarget","value","dataset","role","lastEl","length","undefined","chainCopy","pop","tempChain","tempResult","precision","toString","onClick","data-role","data-value","Array","keys","map","number","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6lDAOaA,G,OAAU,SAACC,GACtB,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,8BACZ,YAAID,EAAME,OAAOC,KAAK,KAEzB,yBAAKF,UAAU,mBAAmBD,EAAMI,W,ECVjBC,EAAQ,KAA7BC,E,EAAAA,SAAUC,E,EAAAA,OAEH,SAASC,IAAoB,IAAD,EACZC,mBAAmB,IADP,mBAClCP,EADkC,KAC3BQ,EAD2B,OAEbD,mBAAiB,GAFJ,mBAElCL,EAFkC,KAE1BO,EAF0B,KAInCC,EAAc,SAACC,GACnB,IAAMC,EAASD,EAAEE,cACXC,EAA4BF,EAAOG,QAAQD,MAC3CE,EAA2BJ,EAAOG,QAAQC,KAC1CC,EAAiBjB,EAAMA,EAAMkB,OAAS,GAE5C,QAAcC,IAAVL,EAAqB,CAKvB,GAAc,OAAVA,EAGF,OAFAN,EAAY,SACZC,EAAU,GAQZ,GAAc,OAAVK,EAAgB,CAClB,IAAIM,EAAmB,YAAOpB,GAG9B,OAFAoB,EAAUC,WACVb,EAAYY,GAQd,GAAa,WAATJ,GAA8B,aAATA,EAAqB,CAK5C,GACW,aAATA,IACY,MAAXC,GAA6B,MAAXA,GAA6B,MAAXA,GAA6B,MAAXA,GACvD,CACA,IAAMK,EAAmB,YAAOtB,GAGhC,OAFAsB,EAAUD,WACVb,EAAY,GAAD,mBAAKc,GAAL,CAAgBR,KAI7B,YADAN,EAAY,GAAD,mBAAKR,GAAL,CAAYc,KAQzB,GAAa,WAATE,EAAmB,CAIrB,IAAMO,EACa,IAAjBvB,EAAMkB,OACFb,EAAOD,EAASJ,EAAMC,KAAK,KAAM,CAAEuB,UAAW,KAC9C,EAGN,OAFAf,EAAUc,QACVf,EAAY,CAACe,EAAWE,aAQb,QAATT,GACFR,EAAY,GAAD,mBAAKR,GAAL,CAAYc,OAK7B,OACE,yBAAKf,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAASG,OAAQA,EAAQF,MAAOA,IAChC,yBACE0B,QAAShB,EACTX,UAAU,6DACV4B,YAAU,SACVC,aAAW,MAJb,MAQA,yBACEF,QAAShB,EACTX,UAAU,6DACV4B,YAAU,SACVC,aAAW,MAJb,MAQA,yBACEF,QAAShB,EACTX,UAAU,iEACV4B,YAAU,WACVC,aAAW,KAJb,KAQA,yBACEF,QAAShB,EACTX,UAAU,mEACV4B,YAAU,WACVC,aAAW,KAJb,KAQA,yBACEF,QAAShB,EACTX,UAAU,gEACV4B,YAAU,WACVC,aAAW,KAJb,KAQA,yBACEF,QAAShB,EACTX,UAAU,+DACV4B,YAAU,WACVC,aAAW,KAJb,KAQA,yBACEF,QAAShB,EACTX,UAAU,8DACV4B,YAAU,MACVC,aAAW,KAJb,KAQA,yBACEF,QAAShB,EACTX,UAAU,iEACV4B,YAAU,SACVC,aAAW,KAJb,KAQC,YAAIC,MAAM,IAAIC,QAAQC,KAAI,SAACC,GAC1B,OACE,yBACEC,IAAG,sBAAiBD,GACpBN,QAAShB,EACTX,UAAU,0BACV4B,YAAU,SACVC,aAAYI,GAEXA,QCvJKE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACnC,EAAD,OAEFoC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8c33bdfb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface FooProp {\r\n  result: Number;\r\n  chain: String[];\r\n}\r\n\r\nexport const Display = (props: FooProp) => {\r\n  return (\r\n    <div className='display'>\r\n      <div className='display__setting-indicator'>\r\n        {[...props.chain].join('')}\r\n      </div>\r\n      <div className='display__result'>{props.result}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { MouseEvent, useState } from 'react';\nimport './style/styles.css';\nimport { Display } from './components/Display';\nconst { evaluate, format } = require('mathjs');\n\nexport default function App(): JSX.Element {\n  const [chain, updateChain] = useState<string[]>([]);\n  const [result, setResult] = useState<number>(0);\n\n  const handleClick = (e: MouseEvent): void => {\n    const target = e.currentTarget as HTMLButtonElement;\n    const value: string | undefined = target.dataset.value;\n    const role: string | undefined = target.dataset.role;\n    const lastEl: string = chain[chain.length - 1];\n\n    if (value !== undefined) {\n      /**\n       * Case: AC\n       * Delete the chain and set back the result\n       */\n      if (value === 'ac') {\n        updateChain([]);\n        setResult(0);\n        return;\n      }\n\n      /**\n       * Case: CE\n       * Delete last element in chain\n       */\n      if (value === 'ce') {\n        let chainCopy: string[] = [...chain];\n        chainCopy.pop();\n        updateChain(chainCopy);\n        return;\n      }\n\n      /**\n       * Case: Number or operator\n       * Add number/operator to chain\n       */\n      if (role === 'number' || role === 'operator') {\n        /**\n         * Case: last Element was already an operator\n         * Remove last Element and add new value\n         */\n        if (\n          role === 'operator' &&\n          (lastEl === '-' || lastEl === '+' || lastEl === '*' || lastEl === '/')\n        ) {\n          const tempChain: string[] = [...chain];\n          tempChain.pop();\n          updateChain([...tempChain, value]);\n          return;\n        }\n        updateChain([...chain, value]);\n        return;\n      }\n\n      /**\n       * Case: Equals\n       * Calculate and update result, reset chain\n       */\n      if (role === 'result') {\n        /**\n         * eslint-disable-next-line no-eval\n         */\n        const tempResult: number =\n          chain.length !== 0\n            ? format(evaluate(chain.join('')), { precision: 14 })\n            : 0;\n        setResult(tempResult);\n        updateChain([tempResult.toString()]);\n        return;\n      }\n\n      /**\n       * Case: Dot\n       * Add dot to chain\n       */\n      if (role === 'dot') {\n        updateChain([...chain, value]);\n      }\n    }\n  };\n\n  return (\n    <div className='app'>\n      <div className='calculator'>\n        <Display result={result} chain={chain} />\n        <div\n          onClick={handleClick}\n          className='calculator__calc-button calculator__calc-button--ac-button'\n          data-role='delete'\n          data-value='ac'\n        >\n          AC\n        </div>\n        <div\n          onClick={handleClick}\n          className='calculator__calc-button calculator__calc-button--ce-button'\n          data-role='delete'\n          data-value='ce'\n        >\n          CE\n        </div>\n        <div\n          onClick={handleClick}\n          className='calculator__calc-button calculator__calc-button--divide-button'\n          data-role='operator'\n          data-value='/'\n        >\n          /\n        </div>\n        <div\n          onClick={handleClick}\n          className='calculator__calc-button calculator__calc-button--multiply-button'\n          data-role='operator'\n          data-value='*'\n        >\n          *\n        </div>\n        <div\n          onClick={handleClick}\n          className='calculator__calc-button calculator__calc-button--minus-button'\n          data-role='operator'\n          data-value='-'\n        >\n          -\n        </div>\n        <div\n          onClick={handleClick}\n          className='calculator__calc-button calculator__calc-button--plus-button'\n          data-role='operator'\n          data-value='+'\n        >\n          +\n        </div>\n        <div\n          onClick={handleClick}\n          className='calculator__calc-button calculator__calc-button--dot-button'\n          data-role='dot'\n          data-value='.'\n        >\n          .\n        </div>\n        <div\n          onClick={handleClick}\n          className='calculator__calc-button calculator__calc-button--equals-button'\n          data-role='result'\n          data-value='='\n        >\n          =\n        </div>\n        {[...Array(10).keys()].map((number) => {\n          return (\n            <div\n              key={`calc-button-${number}`}\n              onClick={handleClick}\n              className='calculator__calc-button'\n              data-role='number'\n              data-value={number}\n            >\n              {number}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\nimport 'core-js/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}